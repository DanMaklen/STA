/* Generated by Yosys 0.5 (git sha1 c3c9fbf, gcc 4.9.2-10ubuntu5 -O2 -fstack-protector-strong -fPIC -Os) */

module FA(Sum, Cout, A, B, Cin);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  input A;
  input B;
  input Cin;
  output Cout;
  output Sum;
  AND2X2 _08_ (
    .A(B),
    .B(A),
    .Y(_05_)
  );
  NOR2X1 _09_ (
    .A(Cin),
    .B(_05_),
    .Y(_06_)
  );
  NOR2X1 _10_ (
    .A(B),
    .B(A),
    .Y(_07_)
  );
  NOR2X1 _11_ (
    .A(_07_),
    .B(_06_),
    .Y(Cout)
  );
  XNOR2X1 _12_ (
    .A(B),
    .B(A),
    .Y(_00_)
  );
  NAND2X1 _13_ (
    .A(Cin),
    .B(_00_),
    .Y(_01_)
  );
  INVX1 _14_ (
    .A(Cin),
    .Y(_02_)
  );
  NOR2X1 _15_ (
    .A(_07_),
    .B(_05_),
    .Y(_03_)
  );
  NAND2X1 _16_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NAND2X1 _17_ (
    .A(_04_),
    .B(_01_),
    .Y(Sum)
  );
endmodule

module MFA(Sum, Cout, A, B, Sin, Cin);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  input A;
  input B;
  input Cin;
  output Cout;
  input Sin;
  output Sum;
  AND2X2 _05_ (
    .A(Sin),
    .B(Cin),
    .Y(_02_)
  );
  NOR2X1 _06_ (
    .A(Sin),
    .B(Cin),
    .Y(_03_)
  );
  NAND2X1 _07_ (
    .A(A),
    .B(B),
    .Y(_04_)
  );
  NOR2X1 _08_ (
    .A(_04_),
    .B(_03_),
    .Y(_00_)
  );
  OR2X2 _09_ (
    .A(_00_),
    .B(_02_),
    .Y(Cout)
  );
  NOR2X1 _10_ (
    .A(_03_),
    .B(_02_),
    .Y(_01_)
  );
  XNOR2X1 _11_ (
    .A(_01_),
    .B(_04_),
    .Y(Sum)
  );
endmodule

module MHA(Sum, Cout, A, B, Sin);
  wire _0_;
  wire _1_;
  input A;
  input B;
  output Cout;
  input Sin;
  output Sum;
  INVX1 _2_ (
    .A(Sin),
    .Y(_0_)
  );
  NAND2X1 _3_ (
    .A(A),
    .B(B),
    .Y(_1_)
  );
  NOR2X1 _4_ (
    .A(_0_),
    .B(_1_),
    .Y(Cout)
  );
  XNOR2X1 _5_ (
    .A(_1_),
    .B(Sin),
    .Y(Sum)
  );
endmodule

module NMFA(Sum, Cout, A, B, Sin, Cin);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  input A;
  input B;
  input Cin;
  output Cout;
  input Sin;
  output Sum;
  NAND2X1 _11_ (
    .A(Sin),
    .B(Cin),
    .Y(_08_)
  );
  OR2X2 _12_ (
    .A(Sin),
    .B(Cin),
    .Y(_09_)
  );
  NAND2X1 _13_ (
    .A(A),
    .B(B),
    .Y(_10_)
  );
  NAND2X1 _14_ (
    .A(_10_),
    .B(_09_),
    .Y(_00_)
  );
  NAND2X1 _15_ (
    .A(_08_),
    .B(_00_),
    .Y(Cout)
  );
  NAND2X1 _16_ (
    .A(_08_),
    .B(_09_),
    .Y(_01_)
  );
  NAND2X1 _17_ (
    .A(_10_),
    .B(_01_),
    .Y(_02_)
  );
  INVX1 _18_ (
    .A(_10_),
    .Y(_03_)
  );
  AND2X2 _19_ (
    .A(Sin),
    .B(Cin),
    .Y(_04_)
  );
  NOR2X1 _20_ (
    .A(Sin),
    .B(Cin),
    .Y(_05_)
  );
  NOR2X1 _21_ (
    .A(_05_),
    .B(_04_),
    .Y(_06_)
  );
  NAND2X1 _22_ (
    .A(_03_),
    .B(_06_),
    .Y(_07_)
  );
  NAND2X1 _23_ (
    .A(_07_),
    .B(_02_),
    .Y(Sum)
  );
endmodule

module bclg4(cout, gout, pout, g, p, cin);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  input cin;
  output [2:0] cout;
  input [3:0] g;
  output gout;
  input [3:0] p;
  output pout;
  INVX1 _16_ (
    .A(p[2]),
    .Y(_00_)
  );
  NAND2X1 _17_ (
    .A(p[1]),
    .B(p[0]),
    .Y(_01_)
  );
  NOR2X1 _18_ (
    .A(_00_),
    .B(_01_),
    .Y(_02_)
  );
  AND2X2 _19_ (
    .A(_02_),
    .B(p[3]),
    .Y(pout)
  );
  OR2X2 _20_ (
    .A(p[2]),
    .B(g[2]),
    .Y(_03_)
  );
  NAND2X1 _21_ (
    .A(g[0]),
    .B(p[1]),
    .Y(_04_)
  );
  NOR2X1 _22_ (
    .A(g[1]),
    .B(g[2]),
    .Y(_05_)
  );
  NAND2X1 _23_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND2X1 _24_ (
    .A(_03_),
    .B(_06_),
    .Y(_07_)
  );
  NAND2X1 _25_ (
    .A(cin),
    .B(_02_),
    .Y(_08_)
  );
  NAND2X1 _26_ (
    .A(_08_),
    .B(_07_),
    .Y(cout[2])
  );
  INVX1 _27_ (
    .A(g[1]),
    .Y(_09_)
  );
  NAND2X1 _28_ (
    .A(_09_),
    .B(_04_),
    .Y(cout[1])
  );
  AND2X2 _29_ (
    .A(p[3]),
    .B(g[2]),
    .Y(_10_)
  );
  NOR2X1 _30_ (
    .A(g[3]),
    .B(_10_),
    .Y(_11_)
  );
  AND2X2 _31_ (
    .A(p[3]),
    .B(p[2]),
    .Y(_12_)
  );
  NAND2X1 _32_ (
    .A(_12_),
    .B(cout[1]),
    .Y(_13_)
  );
  NAND2X1 _33_ (
    .A(_11_),
    .B(_13_),
    .Y(gout)
  );
  INVX1 _34_ (
    .A(g[0]),
    .Y(_14_)
  );
  NAND2X1 _35_ (
    .A(cin),
    .B(p[0]),
    .Y(_15_)
  );
  NAND2X1 _36_ (
    .A(_14_),
    .B(_15_),
    .Y(cout[0])
  );
endmodule

module cla16(sum, a, b);
  input [15:0] a;
  input [15:0] b;
  wire [14:0] carry;
  wire [15:0] g;
  wire [4:0] gout;
  wire [15:0] p;
  wire [4:0] pout;
  output [16:0] sum;
  bclg4 bclg118 (
    .cin(carry[7]),
    .cout(carry[10:8]),
    .g(g[11:8]),
    .gout(gout[2]),
    .p(p[11:8]),
    .pout(pout[2])
  );
  bclg4 bclg1512 (
    .cin(carry[11]),
    .cout(carry[14:12]),
    .g(g[15:12]),
    .gout(gout[3]),
    .p(p[15:12]),
    .pout(pout[3])
  );
  bclg4 bclg30 (
    .cin(1'b0),
    .cout(carry[2:0]),
    .g(g[3:0]),
    .gout(gout[0]),
    .p(p[3:0]),
    .pout(pout[0])
  );
  bclg4 bclg74 (
    .cin(carry[3]),
    .cout(carry[6:4]),
    .g(g[7:4]),
    .gout(gout[1]),
    .p(p[7:4]),
    .pout(pout[1])
  );
  bclg4 bclg_150 (
    .cin(1'b0),
    .cout({ carry[11], carry[7], carry[3] }),
    .g(gout[3:0]),
    .gout(gout[4]),
    .p(pout[3:0]),
    .pout(pout[4])
  );
  rfa rfa0 (
    .a(a[0]),
    .b(b[0]),
    .cin(1'b0),
    .g(g[0]),
    .p(p[0]),
    .sum(sum[0])
  );
  rfa rfa1 (
    .a(a[1]),
    .b(b[1]),
    .cin(carry[0]),
    .g(g[1]),
    .p(p[1]),
    .sum(sum[1])
  );
  rfa rfa10 (
    .a(a[10]),
    .b(b[10]),
    .cin(carry[9]),
    .g(g[10]),
    .p(p[10]),
    .sum(sum[10])
  );
  rfa rfa11 (
    .a(a[11]),
    .b(b[11]),
    .cin(carry[10]),
    .g(g[11]),
    .p(p[11]),
    .sum(sum[11])
  );
  rfa rfa12 (
    .a(a[12]),
    .b(b[12]),
    .cin(carry[11]),
    .g(g[12]),
    .p(p[12]),
    .sum(sum[12])
  );
  rfa rfa13 (
    .a(a[13]),
    .b(b[13]),
    .cin(carry[12]),
    .g(g[13]),
    .p(p[13]),
    .sum(sum[13])
  );
  rfa rfa14 (
    .a(a[14]),
    .b(b[14]),
    .cin(carry[13]),
    .g(g[14]),
    .p(p[14]),
    .sum(sum[14])
  );
  rfa rfa15 (
    .a(a[15]),
    .b(b[15]),
    .cin(carry[14]),
    .g(g[15]),
    .p(p[15]),
    .sum(sum[15])
  );
  rfa rfa2 (
    .a(a[2]),
    .b(b[2]),
    .cin(carry[1]),
    .g(g[2]),
    .p(p[2]),
    .sum(sum[2])
  );
  rfa rfa3 (
    .a(a[3]),
    .b(b[3]),
    .cin(carry[2]),
    .g(g[3]),
    .p(p[3]),
    .sum(sum[3])
  );
  rfa rfa4 (
    .a(a[4]),
    .b(b[4]),
    .cin(carry[3]),
    .g(g[4]),
    .p(p[4]),
    .sum(sum[4])
  );
  rfa rfa5 (
    .a(a[5]),
    .b(b[5]),
    .cin(carry[4]),
    .g(g[5]),
    .p(p[5]),
    .sum(sum[5])
  );
  rfa rfa6 (
    .a(a[6]),
    .b(b[6]),
    .cin(carry[5]),
    .g(g[6]),
    .p(p[6]),
    .sum(sum[6])
  );
  rfa rfa7 (
    .a(a[7]),
    .b(b[7]),
    .cin(carry[6]),
    .g(g[7]),
    .p(p[7]),
    .sum(sum[7])
  );
  rfa rfa8 (
    .a(a[8]),
    .b(b[8]),
    .cin(carry[7]),
    .g(g[8]),
    .p(p[8]),
    .sum(sum[8])
  );
  rfa rfa9 (
    .a(a[9]),
    .b(b[9]),
    .cin(carry[8]),
    .g(g[9]),
    .p(p[9]),
    .sum(sum[9])
  );
  assign sum[16] = gout[4];
endmodule

module dffr_17(q, d, clk, reset);
  input clk;
  input [16:0] d;
  output [16:0] q;
  input reset;
  DFFSR _00_ (
    .CLK(clk),
    .D(d[0]),
    .Q(q[0]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _01_ (
    .CLK(clk),
    .D(d[1]),
    .Q(q[1]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _02_ (
    .CLK(clk),
    .D(d[2]),
    .Q(q[2]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _03_ (
    .CLK(clk),
    .D(d[3]),
    .Q(q[3]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _04_ (
    .CLK(clk),
    .D(d[4]),
    .Q(q[4]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _05_ (
    .CLK(clk),
    .D(d[5]),
    .Q(q[5]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _06_ (
    .CLK(clk),
    .D(d[6]),
    .Q(q[6]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _07_ (
    .CLK(clk),
    .D(d[7]),
    .Q(q[7]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _08_ (
    .CLK(clk),
    .D(d[8]),
    .Q(q[8]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _09_ (
    .CLK(clk),
    .D(d[9]),
    .Q(q[9]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _10_ (
    .CLK(clk),
    .D(d[10]),
    .Q(q[10]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _11_ (
    .CLK(clk),
    .D(d[11]),
    .Q(q[11]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _12_ (
    .CLK(clk),
    .D(d[12]),
    .Q(q[12]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _13_ (
    .CLK(clk),
    .D(d[13]),
    .Q(q[13]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _14_ (
    .CLK(clk),
    .D(d[14]),
    .Q(q[14]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _15_ (
    .CLK(clk),
    .D(d[15]),
    .Q(q[15]),
    .R(reset),
    .S(1'b1)
  );
  DFFSR _16_ (
    .CLK(clk),
    .D(d[16]),
    .Q(q[16]),
    .R(reset),
    .S(1'b1)
  );
endmodule

module multi(P, A, B);
  input [7:0] A;
  input [7:0] B;
  output [15:0] P;
  wire wa10;
  wire wa20;
  wire wa30;
  wire wa40;
  wire wa50;
  wire wa60;
  wire wa77;
  wire wfac08;
  wire wfac18;
  wire wfac28;
  wire wfac38;
  wire wfac48;
  wire wfac58;
  wire wfac68;
  wire wmfc02;
  wire wmfc03;
  wire wmfc04;
  wire wmfc05;
  wire wmfc06;
  wire wmfc12;
  wire wmfc13;
  wire wmfc14;
  wire wmfc15;
  wire wmfc16;
  wire wmfc22;
  wire wmfc23;
  wire wmfc24;
  wire wmfc25;
  wire wmfc26;
  wire wmfc32;
  wire wmfc33;
  wire wmfc34;
  wire wmfc35;
  wire wmfc36;
  wire wmfc42;
  wire wmfc43;
  wire wmfc44;
  wire wmfc45;
  wire wmfc46;
  wire wmfc52;
  wire wmfc53;
  wire wmfc54;
  wire wmfc55;
  wire wmfc56;
  wire wmfc62;
  wire wmfc63;
  wire wmfc64;
  wire wmfc65;
  wire wmfc66;
  wire wmfs12;
  wire wmfs13;
  wire wmfs14;
  wire wmfs15;
  wire wmfs16;
  wire wmfs22;
  wire wmfs23;
  wire wmfs24;
  wire wmfs25;
  wire wmfs26;
  wire wmfs32;
  wire wmfs33;
  wire wmfs34;
  wire wmfs35;
  wire wmfs36;
  wire wmfs42;
  wire wmfs43;
  wire wmfs44;
  wire wmfs45;
  wire wmfs46;
  wire wmfs52;
  wire wmfs53;
  wire wmfs54;
  wire wmfs55;
  wire wmfs56;
  wire wmfs62;
  wire wmfs63;
  wire wmfs64;
  wire wmfs65;
  wire wmfs66;
  wire wmhc01;
  wire wmhc11;
  wire wmhc21;
  wire wmhc31;
  wire wmhc41;
  wire wmhc51;
  wire wmhc61;
  wire wmhs11;
  wire wmhs21;
  wire wmhs31;
  wire wmhs41;
  wire wmhs51;
  wire wmhs61;
  wire wn70;
  wire wn71;
  wire wn72;
  wire wn73;
  wire wn74;
  wire wn75;
  wire wn76;
  wire wnmfc07;
  wire wnmfc17;
  wire wnmfc27;
  wire wnmfc37;
  wire wnmfc47;
  wire wnmfc57;
  wire wnmfc67;
  wire wnmfs17;
  wire wnmfs27;
  wire wnmfs37;
  wire wnmfs47;
  wire wnmfs57;
  wire wnmfs67;
  INVX1 _00_ (
    .A(wfac68),
    .Y(P[15])
  );
  AND2X2 _01_ (
    .A(A[7]),
    .B(B[7]),
    .Y(wa77)
  );
  NAND2X1 _02_ (
    .A(A[7]),
    .B(B[6]),
    .Y(wn76)
  );
  NAND2X1 _03_ (
    .A(A[7]),
    .B(B[5]),
    .Y(wn75)
  );
  NAND2X1 _04_ (
    .A(A[7]),
    .B(B[4]),
    .Y(wn74)
  );
  NAND2X1 _05_ (
    .A(A[7]),
    .B(B[3]),
    .Y(wn73)
  );
  NAND2X1 _06_ (
    .A(A[7]),
    .B(B[2]),
    .Y(wn72)
  );
  NAND2X1 _07_ (
    .A(A[7]),
    .B(B[1]),
    .Y(wn71)
  );
  NAND2X1 _08_ (
    .A(A[7]),
    .B(B[0]),
    .Y(wn70)
  );
  AND2X2 _09_ (
    .A(B[0]),
    .B(A[6]),
    .Y(wa60)
  );
  AND2X2 _10_ (
    .A(B[0]),
    .B(A[5]),
    .Y(wa50)
  );
  AND2X2 _11_ (
    .A(B[0]),
    .B(A[4]),
    .Y(wa40)
  );
  AND2X2 _12_ (
    .A(B[0]),
    .B(A[3]),
    .Y(wa30)
  );
  AND2X2 _13_ (
    .A(B[0]),
    .B(A[2]),
    .Y(wa20)
  );
  AND2X2 _14_ (
    .A(B[0]),
    .B(A[1]),
    .Y(wa10)
  );
  AND2X2 _15_ (
    .A(B[0]),
    .B(A[0]),
    .Y(P[0])
  );
  FA fa08 (
    .A(wnmfc07),
    .B(wnmfs17),
    .Cin(1'b1),
    .Cout(wfac08),
    .Sum(P[8])
  );
  FA fa18 (
    .A(wnmfc17),
    .B(wnmfs27),
    .Cin(wfac08),
    .Cout(wfac18),
    .Sum(P[9])
  );
  FA fa28 (
    .A(wnmfc27),
    .B(wnmfs37),
    .Cin(wfac18),
    .Cout(wfac28),
    .Sum(P[10])
  );
  FA fa38 (
    .A(wnmfc37),
    .B(wnmfs47),
    .Cin(wfac28),
    .Cout(wfac38),
    .Sum(P[11])
  );
  FA fa48 (
    .A(wnmfc47),
    .B(wnmfs57),
    .Cin(wfac38),
    .Cout(wfac48),
    .Sum(P[12])
  );
  FA fa58 (
    .A(wnmfc57),
    .B(wnmfs67),
    .Cin(wfac48),
    .Cout(wfac58),
    .Sum(P[13])
  );
  FA fa68 (
    .A(wnmfc67),
    .B(wa77),
    .Cin(wfac58),
    .Cout(wfac68),
    .Sum(P[14])
  );
  MFA mfa02 (
    .A(A[0]),
    .B(B[2]),
    .Cin(wmhc01),
    .Cout(wmfc02),
    .Sin(wmhs11),
    .Sum(P[2])
  );
  MFA mfa03 (
    .A(A[0]),
    .B(B[3]),
    .Cin(wmfc02),
    .Cout(wmfc03),
    .Sin(wmfs12),
    .Sum(P[3])
  );
  MFA mfa04 (
    .A(A[0]),
    .B(B[4]),
    .Cin(wmfc03),
    .Cout(wmfc04),
    .Sin(wmfs13),
    .Sum(P[4])
  );
  MFA mfa05 (
    .A(A[0]),
    .B(B[5]),
    .Cin(wmfc04),
    .Cout(wmfc05),
    .Sin(wmfs14),
    .Sum(P[5])
  );
  MFA mfa06 (
    .A(A[0]),
    .B(B[6]),
    .Cin(wmfc05),
    .Cout(wmfc06),
    .Sin(wmfs15),
    .Sum(P[6])
  );
  MFA mfa12 (
    .A(A[1]),
    .B(B[2]),
    .Cin(wmhc11),
    .Cout(wmfc12),
    .Sin(wmhs21),
    .Sum(wmfs12)
  );
  MFA mfa13 (
    .A(A[1]),
    .B(B[3]),
    .Cin(wmfc12),
    .Cout(wmfc13),
    .Sin(wmfs22),
    .Sum(wmfs13)
  );
  MFA mfa14 (
    .A(A[1]),
    .B(B[4]),
    .Cin(wmfc13),
    .Cout(wmfc14),
    .Sin(wmfs23),
    .Sum(wmfs14)
  );
  MFA mfa15 (
    .A(A[1]),
    .B(B[5]),
    .Cin(wmfc14),
    .Cout(wmfc15),
    .Sin(wmfs24),
    .Sum(wmfs15)
  );
  MFA mfa16 (
    .A(A[1]),
    .B(B[6]),
    .Cin(wmfc15),
    .Cout(wmfc16),
    .Sin(wmfs25),
    .Sum(wmfs16)
  );
  MFA mfa22 (
    .A(A[2]),
    .B(B[2]),
    .Cin(wmhc21),
    .Cout(wmfc22),
    .Sin(wmhs31),
    .Sum(wmfs22)
  );
  MFA mfa23 (
    .A(A[2]),
    .B(B[3]),
    .Cin(wmfc22),
    .Cout(wmfc23),
    .Sin(wmfs32),
    .Sum(wmfs23)
  );
  MFA mfa24 (
    .A(A[2]),
    .B(B[4]),
    .Cin(wmfc23),
    .Cout(wmfc24),
    .Sin(wmfs33),
    .Sum(wmfs24)
  );
  MFA mfa25 (
    .A(A[2]),
    .B(B[5]),
    .Cin(wmfc24),
    .Cout(wmfc25),
    .Sin(wmfs34),
    .Sum(wmfs25)
  );
  MFA mfa26 (
    .A(A[2]),
    .B(B[6]),
    .Cin(wmfc25),
    .Cout(wmfc26),
    .Sin(wmfs35),
    .Sum(wmfs26)
  );
  MFA mfa32 (
    .A(A[3]),
    .B(B[2]),
    .Cin(wmhc31),
    .Cout(wmfc32),
    .Sin(wmhs41),
    .Sum(wmfs32)
  );
  MFA mfa33 (
    .A(A[3]),
    .B(B[3]),
    .Cin(wmfc32),
    .Cout(wmfc33),
    .Sin(wmfs42),
    .Sum(wmfs33)
  );
  MFA mfa34 (
    .A(A[3]),
    .B(B[4]),
    .Cin(wmfc33),
    .Cout(wmfc34),
    .Sin(wmfs43),
    .Sum(wmfs34)
  );
  MFA mfa35 (
    .A(A[3]),
    .B(B[5]),
    .Cin(wmfc34),
    .Cout(wmfc35),
    .Sin(wmfs44),
    .Sum(wmfs35)
  );
  MFA mfa36 (
    .A(A[3]),
    .B(B[6]),
    .Cin(wmfc35),
    .Cout(wmfc36),
    .Sin(wmfs45),
    .Sum(wmfs36)
  );
  MFA mfa42 (
    .A(A[4]),
    .B(B[2]),
    .Cin(wmhc41),
    .Cout(wmfc42),
    .Sin(wmhs51),
    .Sum(wmfs42)
  );
  MFA mfa43 (
    .A(A[4]),
    .B(B[3]),
    .Cin(wmfc42),
    .Cout(wmfc43),
    .Sin(wmfs52),
    .Sum(wmfs43)
  );
  MFA mfa44 (
    .A(A[4]),
    .B(B[4]),
    .Cin(wmfc43),
    .Cout(wmfc44),
    .Sin(wmfs53),
    .Sum(wmfs44)
  );
  MFA mfa45 (
    .A(A[4]),
    .B(B[5]),
    .Cin(wmfc44),
    .Cout(wmfc45),
    .Sin(wmfs54),
    .Sum(wmfs45)
  );
  MFA mfa46 (
    .A(A[4]),
    .B(B[6]),
    .Cin(wmfc45),
    .Cout(wmfc46),
    .Sin(wmfs55),
    .Sum(wmfs46)
  );
  MFA mfa52 (
    .A(A[5]),
    .B(B[2]),
    .Cin(wmhc51),
    .Cout(wmfc52),
    .Sin(wmhs61),
    .Sum(wmfs52)
  );
  MFA mfa53 (
    .A(A[5]),
    .B(B[3]),
    .Cin(wmfc52),
    .Cout(wmfc53),
    .Sin(wmfs62),
    .Sum(wmfs53)
  );
  MFA mfa54 (
    .A(A[5]),
    .B(B[4]),
    .Cin(wmfc53),
    .Cout(wmfc54),
    .Sin(wmfs63),
    .Sum(wmfs54)
  );
  MFA mfa55 (
    .A(A[5]),
    .B(B[5]),
    .Cin(wmfc54),
    .Cout(wmfc55),
    .Sin(wmfs64),
    .Sum(wmfs55)
  );
  MFA mfa56 (
    .A(A[5]),
    .B(B[6]),
    .Cin(wmfc55),
    .Cout(wmfc56),
    .Sin(wmfs65),
    .Sum(wmfs56)
  );
  MFA mfa62 (
    .A(A[6]),
    .B(B[2]),
    .Cin(wmhc61),
    .Cout(wmfc62),
    .Sin(wn71),
    .Sum(wmfs62)
  );
  MFA mfa63 (
    .A(A[6]),
    .B(B[3]),
    .Cin(wmfc62),
    .Cout(wmfc63),
    .Sin(wn72),
    .Sum(wmfs63)
  );
  MFA mfa64 (
    .A(A[6]),
    .B(B[4]),
    .Cin(wmfc63),
    .Cout(wmfc64),
    .Sin(wn73),
    .Sum(wmfs64)
  );
  MFA mfa65 (
    .A(A[6]),
    .B(B[5]),
    .Cin(wmfc64),
    .Cout(wmfc65),
    .Sin(wn74),
    .Sum(wmfs65)
  );
  MFA mfa66 (
    .A(A[6]),
    .B(B[6]),
    .Cin(wmfc65),
    .Cout(wmfc66),
    .Sin(wn75),
    .Sum(wmfs66)
  );
  MHA mha01 (
    .A(A[0]),
    .B(B[1]),
    .Cout(wmhc01),
    .Sin(wa10),
    .Sum(P[1])
  );
  MHA mha11 (
    .A(A[1]),
    .B(B[1]),
    .Cout(wmhc11),
    .Sin(wa20),
    .Sum(wmhs11)
  );
  MHA mha21 (
    .A(A[2]),
    .B(B[1]),
    .Cout(wmhc21),
    .Sin(wa30),
    .Sum(wmhs21)
  );
  MHA mha31 (
    .A(A[3]),
    .B(B[1]),
    .Cout(wmhc31),
    .Sin(wa40),
    .Sum(wmhs31)
  );
  MHA mha41 (
    .A(A[4]),
    .B(B[1]),
    .Cout(wmhc41),
    .Sin(wa50),
    .Sum(wmhs41)
  );
  MHA mha51 (
    .A(A[5]),
    .B(B[1]),
    .Cout(wmhc51),
    .Sin(wa60),
    .Sum(wmhs51)
  );
  MHA mha61 (
    .A(A[6]),
    .B(B[1]),
    .Cout(wmhc61),
    .Sin(wn70),
    .Sum(wmhs61)
  );
  NMFA nmfa07 (
    .A(A[0]),
    .B(B[7]),
    .Cin(wmfc06),
    .Cout(wnmfc07),
    .Sin(wmfs16),
    .Sum(P[7])
  );
  NMFA nmfa17 (
    .A(A[1]),
    .B(B[7]),
    .Cin(wmfc16),
    .Cout(wnmfc17),
    .Sin(wmfs26),
    .Sum(wnmfs17)
  );
  NMFA nmfa27 (
    .A(A[2]),
    .B(B[7]),
    .Cin(wmfc26),
    .Cout(wnmfc27),
    .Sin(wmfs36),
    .Sum(wnmfs27)
  );
  NMFA nmfa37 (
    .A(A[3]),
    .B(B[7]),
    .Cin(wmfc36),
    .Cout(wnmfc37),
    .Sin(wmfs46),
    .Sum(wnmfs37)
  );
  NMFA nmfa47 (
    .A(A[4]),
    .B(B[7]),
    .Cin(wmfc46),
    .Cout(wnmfc47),
    .Sin(wmfs56),
    .Sum(wnmfs47)
  );
  NMFA nmfa57 (
    .A(A[5]),
    .B(B[7]),
    .Cin(wmfc56),
    .Cout(wnmfc57),
    .Sin(wmfs66),
    .Sum(wnmfs57)
  );
  NMFA nmfa67 (
    .A(A[6]),
    .B(B[7]),
    .Cin(wmfc66),
    .Cout(wnmfc67),
    .Sin(wn76),
    .Sum(wnmfs67)
  );
endmodule

module multiplyadd(result, a, b, reset, clk);
  input [7:0] a;
  input [7:0] b;
  input clk;
  wire [15:0] multiplication;
  input reset;
  output [16:0] result;
  wire [16:0] sum;
  dffr_17 accu_output (
    .clk(clk),
    .d(sum),
    .q(result),
    .reset(reset)
  );
  cla16 cla16_module (
    .a(multiplication),
    .b(result[15:0]),
    .sum(sum)
  );
  multi multi_module (
    .A(a),
    .B(b),
    .P(multiplication)
  );
endmodule

module rfa(sum, g, p, a, b, cin);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  input a;
  input b;
  input cin;
  output g;
  output p;
  output sum;
  NOR2X1 _06_ (
    .A(a),
    .B(b),
    .Y(_05_)
  );
  INVX1 _07_ (
    .A(_05_),
    .Y(p)
  );
  AND2X2 _08_ (
    .A(a),
    .B(b),
    .Y(g)
  );
  XNOR2X1 _09_ (
    .A(a),
    .B(b),
    .Y(_00_)
  );
  NAND2X1 _10_ (
    .A(cin),
    .B(_00_),
    .Y(_01_)
  );
  INVX1 _11_ (
    .A(cin),
    .Y(_02_)
  );
  NOR2X1 _12_ (
    .A(_05_),
    .B(g),
    .Y(_03_)
  );
  NAND2X1 _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NAND2X1 _14_ (
    .A(_04_),
    .B(_01_),
    .Y(sum)
  );
endmodule
